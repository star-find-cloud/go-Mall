// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v4.25.6
// source: image.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 错误码规范
type ErrorCode int32

const (
	ErrorCode_UNKNOWN              ErrorCode = 0
	ErrorCode_INVALID_CHUNK        ErrorCode = 1
	ErrorCode_UPLOAD_TIMEOUT       ErrorCode = 2
	ErrorCode_COS_CONNECTION_ERROR ErrorCode = 3
	ErrorCode_COMPRESSION_FAILED   ErrorCode = 4
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0: "UNKNOWN",
		1: "INVALID_CHUNK",
		2: "UPLOAD_TIMEOUT",
		3: "COS_CONNECTION_ERROR",
		4: "COMPRESSION_FAILED",
	}
	ErrorCode_value = map[string]int32{
		"UNKNOWN":              0,
		"INVALID_CHUNK":        1,
		"UPLOAD_TIMEOUT":       2,
		"COS_CONNECTION_ERROR": 3,
		"COMPRESSION_FAILED":   4,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_image_proto_enumTypes[0].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_image_proto_enumTypes[0]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_image_proto_rawDescGZIP(), []int{0}
}

// ImageRequest 请求参数
type ImageRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ImageId       int64                  `protobuf:"varint,1,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"` // 唯一标识符
	OwnerType     int64                  `protobuf:"varint,2,opt,name=owner_type,json=ownerType,proto3" json:"owner_type,omitempty"`
	OwnerId       int64                  `protobuf:"varint,3,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImageRequest) Reset() {
	*x = ImageRequest{}
	mi := &file_image_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageRequest) ProtoMessage() {}

func (x *ImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_image_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageRequest.ProtoReflect.Descriptor instead.
func (*ImageRequest) Descriptor() ([]byte, []int) {
	return file_image_proto_rawDescGZIP(), []int{0}
}

func (x *ImageRequest) GetImageId() int64 {
	if x != nil {
		return x.ImageId
	}
	return 0
}

func (x *ImageRequest) GetOwnerType() int64 {
	if x != nil {
		return x.OwnerType
	}
	return 0
}

func (x *ImageRequest) GetOwnerId() int64 {
	if x != nil {
		return x.OwnerId
	}
	return 0
}

type ImageProto struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ImageId       int64                  `protobuf:"varint,1,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
	OwnerType     int64                  `protobuf:"varint,2,opt,name=owner_type,json=ownerType,proto3" json:"owner_type,omitempty"`
	OwnerId       int64                  `protobuf:"varint,3,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	Sha256Hash    string                 `protobuf:"bytes,4,opt,name=sha256_hash,json=sha256Hash,proto3" json:"sha256_hash,omitempty"`
	IsCompressed  bool                   `protobuf:"varint,5,opt,name=is_compressed,json=isCompressed,proto3" json:"is_compressed,omitempty"`
	Data          []byte                 `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`                                  // 图片二进制数据
	ContentType   string                 `protobuf:"bytes,7,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"` // 图片MIME类型，如 image/jpeg
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImageProto) Reset() {
	*x = ImageProto{}
	mi := &file_image_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImageProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageProto) ProtoMessage() {}

func (x *ImageProto) ProtoReflect() protoreflect.Message {
	mi := &file_image_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageProto.ProtoReflect.Descriptor instead.
func (*ImageProto) Descriptor() ([]byte, []int) {
	return file_image_proto_rawDescGZIP(), []int{1}
}

func (x *ImageProto) GetImageId() int64 {
	if x != nil {
		return x.ImageId
	}
	return 0
}

func (x *ImageProto) GetOwnerType() int64 {
	if x != nil {
		return x.OwnerType
	}
	return 0
}

func (x *ImageProto) GetOwnerId() int64 {
	if x != nil {
		return x.OwnerId
	}
	return 0
}

func (x *ImageProto) GetSha256Hash() string {
	if x != nil {
		return x.Sha256Hash
	}
	return ""
}

func (x *ImageProto) GetIsCompressed() bool {
	if x != nil {
		return x.IsCompressed
	}
	return false
}

func (x *ImageProto) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ImageProto) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

type ImagesProto struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Images        []*ImageProto          `protobuf:"bytes,1,rep,name=images,proto3" json:"images,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImagesProto) Reset() {
	*x = ImagesProto{}
	mi := &file_image_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImagesProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImagesProto) ProtoMessage() {}

func (x *ImagesProto) ProtoReflect() protoreflect.Message {
	mi := &file_image_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImagesProto.ProtoReflect.Descriptor instead.
func (*ImagesProto) Descriptor() ([]byte, []int) {
	return file_image_proto_rawDescGZIP(), []int{2}
}

func (x *ImagesProto) GetImages() []*ImageProto {
	if x != nil {
		return x.Images
	}
	return nil
}

type UploadResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ImageId       int64                  `protobuf:"varint,1,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"` // 上传成功后的图片ID
	Sha256Hash    string                 `protobuf:"bytes,2,opt,name=sha256_hash,json=sha256Hash,proto3" json:"sha256_hash,omitempty"`
	ChunkCount    uint32                 `protobuf:"varint,3,opt,name=chunk_count,json=chunkCount,proto3" json:"chunk_count,omitempty"`       // 总分片数
	SuccessCount  uint32                 `protobuf:"varint,4,opt,name=success_count,json=successCount,proto3" json:"success_count,omitempty"` // 成功分片数
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UploadResponse) Reset() {
	*x = UploadResponse{}
	mi := &file_image_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadResponse) ProtoMessage() {}

func (x *UploadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_image_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadResponse.ProtoReflect.Descriptor instead.
func (*UploadResponse) Descriptor() ([]byte, []int) {
	return file_image_proto_rawDescGZIP(), []int{3}
}

func (x *UploadResponse) GetImageId() int64 {
	if x != nil {
		return x.ImageId
	}
	return 0
}

func (x *UploadResponse) GetSha256Hash() string {
	if x != nil {
		return x.Sha256Hash
	}
	return ""
}

func (x *UploadResponse) GetChunkCount() uint32 {
	if x != nil {
		return x.ChunkCount
	}
	return 0
}

func (x *UploadResponse) GetSuccessCount() uint32 {
	if x != nil {
		return x.SuccessCount
	}
	return 0
}

// 流式传输协议
type ImageChunk struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Content       []byte                 `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	ImageId       string                 `protobuf:"bytes,2,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
	Seq           uint32                 `protobuf:"varint,3,opt,name=seq,proto3" json:"seq,omitempty"`
	Sha256Chunk   string                 `protobuf:"bytes,4,opt,name=sha256_chunk,json=sha256Chunk,proto3" json:"sha256_chunk,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImageChunk) Reset() {
	*x = ImageChunk{}
	mi := &file_image_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImageChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageChunk) ProtoMessage() {}

func (x *ImageChunk) ProtoReflect() protoreflect.Message {
	mi := &file_image_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageChunk.ProtoReflect.Descriptor instead.
func (*ImageChunk) Descriptor() ([]byte, []int) {
	return file_image_proto_rawDescGZIP(), []int{4}
}

func (x *ImageChunk) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *ImageChunk) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

func (x *ImageChunk) GetSeq() uint32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *ImageChunk) GetSha256Chunk() string {
	if x != nil {
		return x.Sha256Chunk
	}
	return ""
}

// 错误响应
type ErrorResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          ErrorCode              `protobuf:"varint,1,opt,name=code,proto3,enum=image.ErrorCode" json:"code,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ErrorResponse) Reset() {
	*x = ErrorResponse{}
	mi := &file_image_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ErrorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorResponse) ProtoMessage() {}

func (x *ErrorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_image_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorResponse.ProtoReflect.Descriptor instead.
func (*ErrorResponse) Descriptor() ([]byte, []int) {
	return file_image_proto_rawDescGZIP(), []int{5}
}

func (x *ErrorResponse) GetCode() ErrorCode {
	if x != nil {
		return x.Code
	}
	return ErrorCode_UNKNOWN
}

func (x *ErrorResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_image_proto protoreflect.FileDescriptor

const file_image_proto_rawDesc = "" +
	"\n" +
	"\vimage.proto\x12\x05image\"c\n" +
	"\fImageRequest\x12\x19\n" +
	"\bimage_id\x18\x01 \x01(\x03R\aimageId\x12\x1d\n" +
	"\n" +
	"owner_type\x18\x02 \x01(\x03R\townerType\x12\x19\n" +
	"\bowner_id\x18\x03 \x01(\x03R\aownerId\"\xde\x01\n" +
	"\n" +
	"ImageProto\x12\x19\n" +
	"\bimage_id\x18\x01 \x01(\x03R\aimageId\x12\x1d\n" +
	"\n" +
	"owner_type\x18\x02 \x01(\x03R\townerType\x12\x19\n" +
	"\bowner_id\x18\x03 \x01(\x03R\aownerId\x12\x1f\n" +
	"\vsha256_hash\x18\x04 \x01(\tR\n" +
	"sha256Hash\x12#\n" +
	"\ris_compressed\x18\x05 \x01(\bR\fisCompressed\x12\x12\n" +
	"\x04data\x18\x06 \x01(\fR\x04data\x12!\n" +
	"\fcontent_type\x18\a \x01(\tR\vcontentType\"8\n" +
	"\vImagesProto\x12)\n" +
	"\x06images\x18\x01 \x03(\v2\x11.image.ImageProtoR\x06images\"\x92\x01\n" +
	"\x0eUploadResponse\x12\x19\n" +
	"\bimage_id\x18\x01 \x01(\x03R\aimageId\x12\x1f\n" +
	"\vsha256_hash\x18\x02 \x01(\tR\n" +
	"sha256Hash\x12\x1f\n" +
	"\vchunk_count\x18\x03 \x01(\rR\n" +
	"chunkCount\x12#\n" +
	"\rsuccess_count\x18\x04 \x01(\rR\fsuccessCount\"v\n" +
	"\n" +
	"ImageChunk\x12\x18\n" +
	"\acontent\x18\x01 \x01(\fR\acontent\x12\x19\n" +
	"\bimage_id\x18\x02 \x01(\tR\aimageId\x12\x10\n" +
	"\x03seq\x18\x03 \x01(\rR\x03seq\x12!\n" +
	"\fsha256_chunk\x18\x04 \x01(\tR\vsha256Chunk\"O\n" +
	"\rErrorResponse\x12$\n" +
	"\x04code\x18\x01 \x01(\x0e2\x10.image.ErrorCodeR\x04code\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage*q\n" +
	"\tErrorCode\x12\v\n" +
	"\aUNKNOWN\x10\x00\x12\x11\n" +
	"\rINVALID_CHUNK\x10\x01\x12\x12\n" +
	"\x0eUPLOAD_TIMEOUT\x10\x02\x12\x18\n" +
	"\x14COS_CONNECTION_ERROR\x10\x03\x12\x16\n" +
	"\x12COMPRESSION_FAILED\x10\x042\xbc\x01\n" +
	"\fImageService\x126\n" +
	"\fGetImageInfo\x12\x13.image.ImageRequest\x1a\x11.image.ImageProto\x129\n" +
	"\vUploadImage\x12\x11.image.ImageChunk\x1a\x15.image.UploadResponse(\x01\x129\n" +
	"\rDownloadImage\x12\x13.image.ImageRequest\x1a\x11.image.ImageChunk0\x01B\x06Z\x04./pbb\x06proto3"

var (
	file_image_proto_rawDescOnce sync.Once
	file_image_proto_rawDescData []byte
)

func file_image_proto_rawDescGZIP() []byte {
	file_image_proto_rawDescOnce.Do(func() {
		file_image_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_image_proto_rawDesc), len(file_image_proto_rawDesc)))
	})
	return file_image_proto_rawDescData
}

var file_image_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_image_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_image_proto_goTypes = []any{
	(ErrorCode)(0),         // 0: image.ErrorCode
	(*ImageRequest)(nil),   // 1: image.ImageRequest
	(*ImageProto)(nil),     // 2: image.ImageProto
	(*ImagesProto)(nil),    // 3: image.ImagesProto
	(*UploadResponse)(nil), // 4: image.UploadResponse
	(*ImageChunk)(nil),     // 5: image.ImageChunk
	(*ErrorResponse)(nil),  // 6: image.ErrorResponse
}
var file_image_proto_depIdxs = []int32{
	2, // 0: image.ImagesProto.images:type_name -> image.ImageProto
	0, // 1: image.ErrorResponse.code:type_name -> image.ErrorCode
	1, // 2: image.ImageService.GetImageInfo:input_type -> image.ImageRequest
	5, // 3: image.ImageService.UploadImage:input_type -> image.ImageChunk
	1, // 4: image.ImageService.DownloadImage:input_type -> image.ImageRequest
	2, // 5: image.ImageService.GetImageInfo:output_type -> image.ImageProto
	4, // 6: image.ImageService.UploadImage:output_type -> image.UploadResponse
	5, // 7: image.ImageService.DownloadImage:output_type -> image.ImageChunk
	5, // [5:8] is the sub-list for method output_type
	2, // [2:5] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_image_proto_init() }
func file_image_proto_init() {
	if File_image_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_image_proto_rawDesc), len(file_image_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_image_proto_goTypes,
		DependencyIndexes: file_image_proto_depIdxs,
		EnumInfos:         file_image_proto_enumTypes,
		MessageInfos:      file_image_proto_msgTypes,
	}.Build()
	File_image_proto = out.File
	file_image_proto_goTypes = nil
	file_image_proto_depIdxs = nil
}
